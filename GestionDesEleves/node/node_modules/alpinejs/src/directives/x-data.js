import { directive, prefix } from 'alpinejs/src/directives'
import { initInterceptors } from 'alpinejs/src/interceptor'
import { injectDataProviders } from 'alpinejs/src/datas'
import { addRootSelector } from 'alpinejs/src/lifecycle'
import { shouldSkipRegisteringDataDuringClone } from 'alpinejs/src/clone'
import { addScopeToNode } from 'alpinejs/src/scope'
import { injectMagics, magic } from 'alpinejs/src/magics'
import { reactive } from 'alpinejs/src/reactivity'
import { evaluate } from 'alpinejs/src/evaluator'

addRootSelector(() => `[${prefix('data')}]`)

directive('data', ((el, { expression }, { cleanup }) => {
    if (shouldSkipRegisteringDataDuringClone(el)) return

    expression = expression === '' ? '{}' : expression

    let magicContext = {}
    injectMagics(magicContext, el)

    let dataProviderContext = {}
    injectDataProviders(dataProviderContext, magicContext)

    let data = evaluate(el, expression, { scope: dataProviderContext })

    if (data === undefined || data === true) data = {}

    injectMagics(data, el)

    let reactiveData = reactive(data)

    initInterceptors(reactiveData)

    let undo = addScopeToNode(el, reactiveData)

    reactiveData['init'] && evaluate(el, reactiveData['init'])

    cleanup(() => {
        reactiveData['destroy'] && evaluate(el, reactiveData['destroy'])

        undo()
    })
}))
